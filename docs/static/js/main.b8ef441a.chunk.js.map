{"version":3,"sources":["componets/AddCategory.js","helpers/getGifs.js","componets/GifGridItem.js","componets/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","protTypes","PropTypes","func","isRequired","getGits","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"wPAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAchD,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,YAkB3BZ,EAAYe,UAAY,CACtBd,c,OAAee,EAAUC,KAAKC,Y,2BCzBnBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,UAAUZ,QAVV,kBAcdM,GAdc,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACvC,OACE,yBAAKc,UAAU,0CACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCFGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EACdlB,mBAAS,CACjCyB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAaxC,OARAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IACGqB,EDX4BK,CAAa1B,GAAjCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAErB,OACI,oCACI,wBAAIJ,UAAU,qCAAqChB,GACjDoB,GAAW,uBAAGJ,UAAU,oCAAb,cACjB,yBAAKA,UAAU,aAEPH,EAAOJ,KAAI,SAACC,GAAD,OAAU,kBAAC,EAAD,eACjBiB,IAAKjB,EAAIC,GACTD,IAAKA,GACAA,UEbZkB,EAAe,WAAM,MAGI9C,mBAAS,CAAC,cAHd,mBAGzB+C,EAHyB,KAGbhD,EAHa,KAShC,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACGgD,EAAWpB,KAAI,SAAAT,GAAQ,OACtB,kBAAC,EAAD,CAAS2B,IAAK3B,EAAUA,SAAUA,UCf5C8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.b8ef441a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.protTypes = {\n  setCategories: PropTypes.func.isRequired\n}","export const getGits = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=VYhrC0B6K8l9tWLO85wYTnUVZ58v3PRs`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n    \n    const { data:images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n        <div className=\"card-grid\">\n            {\n                images.map((img) => (<GifGridItem\n                    key={img.id}\n                    img={img}\n                    { ...img }\n                \n                />))\n            }\n        </div>\n        </>\n    );\n};\n","//custom hooks\nimport { useState, useEffect } from \"react\";\nimport { getGits } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n  useEffect(() => {\n    getGits(category).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n  return state;\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"../src/componets/AddCategory\";\nimport { GifGrid } from \"./componets/GifGrid\";\n\nexport const GifExpertApp = () => {\n  //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n\n  const [categories, setCategories] = useState([\"One Punch\"]);\n  //   const handleAdd = () => {\n  //    setCategories(['HunterXHunter', ...categories]); forma 1\n  //       setCategories((cats) => [...cats, \"HunterXHunter\"]); //forma 2\n\n  // }\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map(category => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}